<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Widget</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.6.5/flowbite.min.css" rel="stylesheet" />
    <script src="https://unpkg.com/vue@2.6.14/dist/vue.min.js"></script>
</head>
<body>
<div id="app" class="bg-white rounded-lg p-4">
    <h1 id="test">
        <h5 class="mb-4 text-2xl font-bold tracking-tight dark:text-white text-right" v-if="amount">Сумма к оплате: {{amount}} {{token}}</h5>
    </h1>
    <p class="mr-2 text-lg font-bold text-center mb-4" v-if="address == null">Сеть блокчейна и криптовалюта:</p>
    <div class=" flex justify-center" v-if="address">
        <p class="mr-2 text-lg font-bold text-center mb-4">{{selectedTokenName}}</p>
    </div>
    <div class="flex justify-center" v-if="address == null && network == null">
        <button id="dropdownRadioButton" data-dropdown-toggle="dropdownDefaultRadio" class=" mr-4 text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-6 py-3 text-center inline-flex items-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800" type="button">
            <span class="mr-2 text-lg">Выбрать криптовалюту</span>
            <svg class="w-2.5 h-2.5 ml-2.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"/>
            </svg>
        </button>
        <button v-if="selectedToken" type="submit" @click="fetchDataToken(selectedToken)" class="flex px-6 py-3 justify-center rounded-md ring-2 text-sm font-semibold leading-6 text-blue-700 shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"><span class=" text-lg ">Выбрать</span></button>
        <div id="dropdownDefaultRadio" class="z-10 hidden w-48 bg-white divide-y divide-gray-100 rounded-lg shadow dark:bg-gray-700 dark:divide-gray-600">
            <ul class="p-3 space-y-3 text-sm text-gray-700 dark:text-gray-200" aria-labelledby="dropdownRadioButton">
                <li v-for="token in tokenlist" :key="token.id">
                    <div class="flex items-center">
                        <input @click="updateSelectedTokenName(token.symbol, token.name)" v-model="selectedToken" :id="'default-radio-' + token.symbol + '-' + token.network_id" :value="token.network_id" type="radio" name="default-radio" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-700 dark:focus:ring-offset-gray-700 focus:ring-2 dark:bg-gray-600 dark:border-gray-500">
                        <label :for="'default-radio-' + token.symbol + '-' + token.network_id" class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">{{ token.symbol + " (" + token.name + ")" }}</label>
                    </div>
                </li>
            </ul>
        </div>
    </div>

    <p v-if="address" class="mr-2 mb-2 text-lg font-bold text-center mt-4 relative">Адрес кошелька: <br> <span v-html="content_address"></span>
        <span v-if="showTooltip" class="absolute bottom-5 left-1/2 transform -translate-x-1/2 py-1 px-2 bg-blue-500 text-white text-xs rounded opacity-75">
            Скопировано
        </span>
        <button @click="copyToClipboard" type="button" class="ml-2 text-blue-700 hover:bg-gray-200 ring-2 ring-inset ring-blue-700 font-medium rounded-lg text-sm p-2.5 text-center inline-flex items-center">
            <svg class="w-4 h-4" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="copy" role="img" xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 512 512"> <path fill="currentColor" d="M272 0H396.1c12.7 0 24.9 5.1 33.9 14.1l67.9 67.9c9 9 14.1 21.2 14.1 33.9V336c0 26.5-21.5 48-48 48H272c-26.5 0-48-21.5-48-48V48c0-26.5 21.5-48 48-48zM48 128H192v64H64V448H256V416h64v48c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V176c0-26.5 21.5-48 48-48z"/></svg>
        </button>
    </p>
    <div v-html="content"></div>

    <div v-if="merchant_id != 'de80eb3c-eaef-4864-ad31-e87603ef57f7'" class="flex justify-center my-4">
        <button v-if="address && order_tx == null && loading == null" @click="startFetching" class="flex px-6 py-3 justify-center rounded-md ring-2 text-sm font-semibold leading-6 text-blue-700 shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
            <span class=" text-lg ">Оплатил</span>
            <span v-if="loading">
                <svg aria-hidden="true" class="w-8 h-8 mr-2 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor"/>
                    <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill"/>
                </svg>
            </span>
        </button>

        <button v-if="loading && order_tx == null" disabled class="flex px-6 py-3 justify-center rounded-md ring-2 text-sm font-semibold leading-6 text-blue-700 shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
            <span class=" text-lg mr-4">Ожидаем поступление средств </span>
            <span>
                <svg aria-hidden="true" class="w-8 h-8 mr-2 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor"/>
                    <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill"/>
                </svg>
            </span>
        </button>
    </div>

    <p class="mr-2 text-xl text-center my-4" v-if="totalSumm">Оплачено <span class="font-bold">{{parseFloat(totalSumm)}} {{token}}</span> из <span class="font-bold">{{amount}} {{token}}</span></p>
</div>
<script>
    new Vue({
        el: '#app',
        data: {
            cryptoOrisElement: null,
            api_key: null,
            client_id: null,
            merchant_id: null,
            order_id: null,
            product_id: null,
            network: null,
            w_type: null,
            networkIsAvailable: false,
            netDataPassed: false,
            amount: null,
            token: null,
            token_id: null,
            availableNets: null,
            availableTokens: null,
            netlist: null,
            tokenlist: null,
            selectedToken: null,
            content: '',
            address: null,
            userPaid: false,
            selectedTokenName: '',
            fetchingInterval: null,
            order_tx: null,
            loading: null,
            totalSumm: null,
            ec_from: null,
            ec_sign_r: null,
            ec_sign_v: null,
            ec_sign_s: null,
            ec_msg: null,
            showTooltip: false,
            content_address: ''
        },
        mounted() {
            this.initializeData()
            this.fetchData()
        },
        methods: {
            startFetching() {
                this.loading = true
                this.stopFetching()
                this.fetchTxInfo()
                this.fetchingInterval = setInterval(this.fetchTxInfo, 20000)
            },
            stopFetching() {
                if (this.fetchingInterval) {
                    clearInterval(this.fetchingInterval)
                    this.fetchingInterval = null
                }
            },
            fetchTxInfo() {
                fetch("/check_tx", {
                    method: "POST",
                    body: JSON.stringify({
                        ec_msg: this.ec_msg,
                        api_key: this.api_key,
                        client_id: this.client_id,
                        merchant_id: this.merchant_id,
                        order_id: this.order_id,
                        network: this.network,
                        amount: this.amount,
                        token: this.token,
                        w_type: this.w_type
                    }),
                    headers: {
                        "Content-Type": "application/json"
                    }
                })
                    .then(response => {
                        if (response.ok) {
                            return response.json()
                        } else {
                            throw new Error("Request failed")
                        }
                    })
                    .then(data => {
                        if(data.ok) {
                            this.stopFetching()
                            this.loading = null
                        }
                        if(data.msg == 'already send') {
                            this.stopFetching()
                        }
                        this.order_tx = data.order_tx
                        this.totalSumm = data.totalSumm
                    })
                    .catch(error => {
                        this.stopFetching()
                        console.error(error)
                    })
            },
            updateSelectedTokenName(symbol, name) {
                this.selectedTokenName = symbol + ' (' + name + ')'
            },
            startTxExecution() {
                this.userPaid = true
            },
            copyToClipboard() {
                this.showTooltip = true;
                const textArea = document.createElement("textarea");
                textArea.value = this.address;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand("copy");
                document.body.removeChild(textArea);
                const self = this;
                setTimeout(function() {
                    self.showTooltip = false;
                }, 2000);
            },
            initializeData() {
                const urlParams = new URLSearchParams(window.location.search)
                const dataString = urlParams.get('data')
                const receivedData = JSON.parse(decodeURIComponent(dataString))

                this.ec_from = receivedData.ec_from
                this.ec_sign_r = receivedData.ec_sign_r
                this.ec_sign_v = receivedData.ec_sign_v
                this.ec_sign_s = receivedData.ec_sign_s
                this.ec_msg = JSON.parse(receivedData.ec_msg)
                this.w_type = this.ec_msg.type
                this.client_id = this.ec_msg.id_client
                this.merchant_id = this.ec_msg.id_merchant
                this.order_id = this.ec_msg.id_order
                this.product_id = this.ec_msg.id_product
                this.amount = this.ec_msg.summ
                if (this.ec_msg.token != null) {
                    this.token = this.ec_msg.token.toString().toUpperCase();
                }
                if (this.ec_msg.token_id != null) {
                    this.token_id = parseInt(this.ec_msg.token_id);
                }
                if (this.ec_msg.network != null) {
                    this.network = this.ec_msg.network.toString();
                    this.netDataPassed = true
                }
            },
            fetchData() {
                fetch("/get_tokens_list", {
                    method: "GET",
                    headers: {
                        "Content-Type": "application/json"
                    }
                })
                    .then(response => {
                        if (response.ok) {
                            return response.json()
                        } else {
                            throw new Error("Request failed")
                        }
                    })
                    .then(data => {
                        data.tokenlist.forEach(item => {
                            console.log(item)
                            if (item.network_id.toString() == this.network && item.id == this.token_id) {
                                this.networkIsAvailable = true
                                this.selectedTokenName = item.symbol + " (" + item.name + ")"
                            }
                        });
                        this.tokenlist = data.tokenlist
                        this.fetchDataToken()
                    })
                    .catch(error => {
                        console.error(error)
                    })
            },
            fetchDataToken(selectedToken = this.network) {
                if(!this.networkIsAvailable && (selectedToken != null && this.amount != null) && this.netDataPassed) {
                    const addressBlock = document.getElementById('addressBlock')
                    let htmlAddressBlock = `
                                <p class="mr-2 text-lg font-bold text-center mt-4">На данный момент выбранная сеть ${selectedToken} недоступна</p>
                                `
                    addressBlock.innerHTML = htmlAddressBlock
                }
                else if(this.amount != null && this.order_id != null && this.client_id != null) {
                    fetch("/get_address", {
                        method: "POST",
                        body: JSON.stringify({
                            ec_msg: this.ec_msg,
                            ec_from: this.ec_from,
                            ec_sign_r: this.ec_sign_r,
                            ec_sign_v: this.ec_sign_v,
                            ec_sign_s: this.ec_sign_s
                        }),
                        headers: {
                            "Content-Type": "application/json"
                        }
                    })
                        .then(response => {
                            if (response.ok) {
                                return response.json()
                            } else {
                                throw new Error("Request failed")
                            }
                        })
                        .then(data => {
                            this.$nextTick(() => {
                                const addressBlock = document.getElementById('addressBlock')
                                let htmlAddressBlock, address_content
                                if (data.gettmpaddres[0].address == null) {
                                    htmlAddressBlock = `
                                    <p class="mr-2 text-lg font-bold text-center mt-4">Превышен лимит запросов к серверу, попробуйте позже</p>
                                    `
                                } else if (data.gettmpaddres[0].address) {
                                    htmlAddressBlock = `
                                    <div class="flex justify-center mb-2"><img src="https://api.qrserver.com/v1/create-qr-code/?data=${data.gettmpaddres[0].address}&size=200x200" alt="QR Code"></div>
                                    `
                                    address_content = `
                                    <a href="h2k://h2k.me/TX/${this.token}/${this.network}/${this.amount}/${data.gettmpaddres[0].address}/Виджет"><span class="text-blue-700">${data.gettmpaddres[0].address}</span></a>`
                                } else {
                                    htmlAddressBlock = `
                                    <p class="mr-2 text-lg font-bold text-center mt-4">Произошла ошибка, попробуйте позже. Если ошибка не исправиться обратитесь специалистам</p>
                                    `
                                }
                                this.content += htmlAddressBlock
                                this.content_address = address_content
                                this.address = data.gettmpaddres[0].address
                                return this.address
                            })
                        })
                        .catch(error => {
                            console.error(error)
                        });
                } else if(this.order_id == null || this.client_id == null || this.amount == null) {
                    const addressBlock = document.getElementById('addressBlock')
                    let htmlAddressBlock = `
                                <p class="mr-2 text-lg font-bold text-center mt-4">Необходимые данные не указаны</p>
                                `
                    addressBlock.innerHTML = htmlAddressBlock
                }
            }
        }
    })
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.6.5/flowbite.min.js"></script>
</body>
</html>
